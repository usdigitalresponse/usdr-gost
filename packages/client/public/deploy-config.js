// NOTE: This file is only used in dev environments and is excluded from builds.
//  An alternate version is generated by Terraform for Staging and Production environments.
window.APP_CONFIG = window.APP_CONFIG || {};
window.APP_CONFIG.apiURLForGOST = '/';
window.APP_CONFIG.overrideFeatureFlag = (flagName, overrideValue) => {
  const storageKey = 'featureFlags';
  let overrides = {};
  try {
    overrides = JSON.parse(window.sessionStorage.getItem(storageKey)) || {};
  } catch (e) {
    console.error(`Error parsing window.sessionStorage.${storageKey} as JSON:`, e);
    console.warn(`window.sessionStorage.${storageKey} will be replaced.`);
  }
  overrides[flagName] = overrideValue;
  window.sessionStorage.setItem(storageKey, JSON.stringify(overrides));
  // Reformatted according to common ESLint rules
  /* eslint-disable no-console */
  // console.log('New feature flag overrides in page session:', window.sessionStorage.getItem(storageKey));
  console.log(`New feature flag overrides in page session: ${window.sessionStorage.getItem(storageKey)}`);
  /* eslint-enable no-console */
};

// For local development only. Register feature flags for Staging and Production by
//  configuring the `website_feature_flags` input variable in Terraform (see `terraform/*.tfvars`).
window.APP_CONFIG.featureFlags = {
  newTerminologyEnabled: true,
  newGrantsDetailPageEnabled: true,
  shareTerminologyEnabled: true,
  followNotesEnabled: true,
};

// Setting a GOOGLE_TAG_ID enables Google Analytics.
//  Empty for the dev configuration by default.
//  Set to 'G-D5DFR7BN0N' to enable Google Analytics in dev environments.
window.APP_CONFIG.GOOGLE_TAG_ID = '';

// This only takes effect if GOOGLE_TAG_ID is non-empty and can generally be ignored.
//  See https://support.google.com/analytics/answer/7201382 for usage information.
window.APP_CONFIG.GOOGLE_ANALYTICS_DEBUG = true;
