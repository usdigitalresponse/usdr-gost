services:
  app:
    container_name: gost-app
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      target: api
    volumes:
      - ./:/app
      - type: volume
        source: node_modules
        target: /app/node_modules
    networks:
      - app
      - postgres
    ports:
      - 3000:3000
      - 9229:9229
    command:
      - "yarn"
      - "debug:server"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./packages/server/.env

  frontend:
    container_name: gost-frontend
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      target: client
    volumes:
      - ./:/app
      - type: volume
        source: node_modules
        target: /app/node_modules
    networks:
      - app
    ports:
      - 8080:8080
    environment:
      - GOST_API_URL=http://app:3000/
    env_file:
      - ./packages/client/.env

  postgres:
    container_name: gost-postgres
    hostname: postgres
    image: 'bitnami/postgresql:14.4.0'
    networks:
      - postgres
    environment:
      - POSTGRESQL_PASSWORD=password123
      - POSTGRESQL_DATABASE=usdr_grants
      - POSTGRESQL_USER=postgres
    volumes:
      - ./docker/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./docker/postgres/docker-entrypoint-preinitdb.d:/docker-entrypoint-preinitdb.d
      # - ./docker/postgres/persistence:/bitnami/postgresql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      start_period: 30s
  e2e:
    image: cypress
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      target: e2e
    container_name: cypress
    networks:
      - app
    depends_on:
      - app
      - frontend
      - postgres
    # note: inside e2e container, the network allows accessing
    # "web" host under name "web"
    # so "curl http://web" would return whatever the webserver
    # in the "web" container is cooking
    # see https://docs.docker.com/compose/networking/
    command: npx cypress run
    # mount the host directory e2e/cypress and the file e2e/cypress.config.js as
    # volumes within the container
    # this means that:
    #  1. anything that Cypress writes to these folders (e.g., screenshots,
    #     videos) appears also on the Docker host's filesystem
    #  2. any change that the developer applies to Cypress files on the host
    #     machine immediately takes effect within the e2e container (no docker
    #     rebuild required).
    volumes:
      - ./packages/e2e/cypress:/app/cypress
      - ./packages/e2e/cypress.config.js:/app/cypress.config.js

networks:
  app:
    driver: bridge
  postgres:

volumes:
  node_modules:
