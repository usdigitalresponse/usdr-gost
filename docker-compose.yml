services:
  app:
    container_name: gost-app
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      target: api
    volumes:
      - ./:/app
      - type: volume
        source: node_modules
        target: /app/node_modules
    networks:
      - app
      - postgres
    ports:
      - 3000:3000
      - 9229:9229
    command:
      - "yarn"
      - "debug:server"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./packages/server/.env

  localstack:
    container_name: "gost-localstack_main"
    image: localstack/localstack
    ports:
      - 4566:4566           # LocalStack Gateway
      - 4510-4559:4510-4559  # external services port range
    environment:
      - DEBUG=${DEBUG-}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=${AWS_REGION:-us-west-2}
    networks:
      - app
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./localstack/entrypoint/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh"

  frontend:
    container_name: gost-frontend
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      target: client
    volumes:
      - ./:/app
      - type: volume
        source: node_modules
        target: /app/node_modules
    networks:
      - app
    ports:
      - 8080:8080
    environment:
      - GOST_API_URL=http://app:3000/
    env_file:
      - ./packages/client/.env

  postgres:
    container_name: gost-postgres
    hostname: postgres
    image: 'bitnami/postgresql:14.4.0'
    platform: linux/amd64
    networks:
      - postgres
    environment:
      - POSTGRESQL_PASSWORD=password123
      - POSTGRESQL_DATABASE=usdr_grants
      - POSTGRESQL_USER=postgres
    ports:
        - 5432:5432
    volumes:
      - ./docker/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./docker/postgres/docker-entrypoint-preinitdb.d:/docker-entrypoint-preinitdb.d
      # - ./docker/postgres/persistence:/bitnami/postgresql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      start_period: 30s

networks:
  app:
    driver: bridge
  postgres:

volumes:
  node_modules:
