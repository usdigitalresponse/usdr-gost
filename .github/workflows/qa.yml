name: QA Checks

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
    outputs:
      server-test-outcome:
        value: ${{ jobs.test-server.result }}
      server-test-coverage-markdown-report:
        value: ${{ jobs.test-server.outputs.coverage-markdown-report }}
      client-test-outcome:
        value: ${{ jobs.test-client.result }}
      client-test-coverage-markdown-report:
        value: ${{ jobs.test-client.outputs.coverage-markdown-report }}
      e2e-test-outcome:
        value: ${{ jobs.test-e2e.result }}
      eslint-outcome:
        value: ${{ jobs.eslint.result }}
      tflint-outcome:
        value: ${{ jobs.tflint.result }}

permissions:
  contents: read

jobs:
  prepare-qa:
    name: Prepare for QA
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version-file: .nvmrc
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: "true"

  test-server:
    name: Test server-side code
    runs-on: ubuntu-latest
    needs:
      - prepare-qa
    outputs:
      coverage-markdown-report: ${{ steps.coverage-markdown.outputs.markdownReport }}
    services:
      postgres:
        image: "postgres:13"
        env:
          POSTGRES_DB: usdr_grants_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version-file: .nvmrc
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Install dependencies
        run: yarn workspace server install -D --frozen-lockfile
        env:
          CI: "true"
      - name: Prepare test execution environment
        run: cp packages/server/.env.example packages/server/.env
      - name: Run unit tests with coverage
        run: yarn workspace server coverage
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          CI: "true"
          POSTGRES_TEST_URL: "postgresql://postgres:password@localhost:${{ job.services.postgres.ports[5432] }}/usdr_grants_test"
          POSTGRES_URL: "postgresql://postgres:password@localhost:${{ job.services.postgres.ports[5432] }}/usdr_grants_test"
          NOTIFICATIONS_EMAIL: grants-identification@usdigitalresponse.org
      - name: Generate coverage text report
        run: npx nyc report --reporter text --cwd packages/server > packages/server/coverage.txt
      - name: Generate coverage markdown report
        id: coverage-markdown
        uses: fingerprintjs/action-coverage-report-md@b7fcda0d2891d215c6808d32ca249e43f55abe3f # v1.0.6
        with:
          textReportPath: 'packages/server/coverage.txt'
          srcBasePath: 'packages/server/'

  test-client:
    name: Test client-side code
    runs-on: ubuntu-latest
    needs:
      - prepare-qa
    outputs:
      coverage-markdown-report: ${{ steps.coverage-markdown.outputs.markdownReport }}
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version-file: .nvmrc
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Install dependencies
        run: yarn workspace client install -D --frozen-lockfile
        env:
          CI: "true"
      - name: Prepare test execution environment
        run: cp packages/client/.env.example packages/client/.env
      - name: Run unit tests with coverage
        run: yarn workspace client coverage
        env:
          CI: "true"
      - name: Generate coverage text report
        run: npx nyc report --reporter text --cwd packages/client > packages/client/coverage.txt
      - name: Generate coverage markdown report
        id: coverage-markdown
        uses: fingerprintjs/action-coverage-report-md@b7fcda0d2891d215c6808d32ca249e43f55abe3f # v1.0.6
        with:
          textReportPath: 'packages/client/coverage.txt'
          srcBasePath: 'packages/client/'

  test-e2e:
    name: Test end-to-end integration
    runs-on: ubuntu-latest
    needs:
      - prepare-qa
    services:
      postgres:
        image: "postgres:13"
        env:
          POSTGRES_DB: usdr_grants_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Install Node.js
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version-file: .nvmrc
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: "1"
      - name: Run migrations
        env:
          POSTGRES_TEST_URL: "postgresql://postgres:password@localhost:${{ job.services.postgres.ports[5432] }}/usdr_grants_test"
          # This is intentional to set POSTGRES_URL=POSTGRES_TEST_URL; ARPA Reporter test runner gates
          # dev vs. CI differences based on whether these are the same.
          POSTGRES_URL: "postgresql://postgres:password@localhost:${{ job.services.postgres.ports[5432] }}/usdr_grants_test"
        run: yarn db:migrate
      - name: Start Applications
        env:
          POSTGRES_TEST_URL: "postgresql://postgres:password@localhost:${{ job.services.postgres.ports[5432] }}/usdr_grants_test"
          # This is intentional to set POSTGRES_URL=POSTGRES_TEST_URL; ARPA Reporter test runner gates
          # dev vs. CI differences based on whether these are the same.
          POSTGRES_URL: "postgresql://postgres:password@localhost:${{ job.services.postgres.ports[5432] }}/usdr_grants_test"
          AWS_ACCESS_KEY_ID: "Fake AWS Key"
          AWS_SECRET_ACCESS_KEY: "Fake AWS Secret"
          NOTIFICATIONS_EMAIL: grants-identification@usdigitalresponse.org
          DATA_DIR: './data'
        run: yarn serve &
      - name: Run e2e tests
        uses: cypress-io/github-action@ebe8b24c4428922d0f793a5c4c96853a633180e3 # v6.6.0
        env:
          CYPRESS_BASE_URL: 'http://localhost:8080'
        with:
          publish-summary: true
          working-directory: packages/e2e
          wait-on: ${{ env.CYPRESS_BASE_URL }}

  eslint:
    name: Lint JavaScript
    runs-on: ubuntu-latest
    needs:
      - prepare-qa
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - name: Setup Node
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65 # v4.0.0
        with:
          node-version-file: .nvmrc
          cache: yarn
          cache-dependency-path: yarn.lock
      - name: Install dependencies
        run: yarn install -D --frozen-lockfile
        env:
          CI: "true"
      - name: Run linter
        run: yarn lint

  tflint:
    name: Lint terraform
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@1b05615854632b887b69ae1be8cbefe72d3ae423 # v2.6.0
        with:
          disable-sudo: true
          egress-policy: audit
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          ref: ${{ inputs.ref }}
          show-progress: 'false'
          persist-credentials: 'false'
      - uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        name: Cache plugin dir
        with:
          path: .tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('terraform/.tflint.hcl') }}
      - uses: terraform-linters/setup-tflint@19a52fbac37dacb22a09518e4ef6ee234f2d4987 # v4.0.0
        name: Setup TFLint
        with:
          tflint_version: latest
          tflint_wrapper: true
      - name: Show TFLint version
        run: tflint --version
      - name: Init TFLint
        run: tflint --init
        working-directory: terraform
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Run TFLint
        run: tflint --format compact --recursive --minimum-failure-severity=error
